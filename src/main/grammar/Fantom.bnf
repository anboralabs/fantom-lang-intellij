{
    parserClass="co.anbora.labs.fantom.lang.core.parser.FantomParser"
    psiClassPrefix="Fantom"
    psiImplClassSuffix="Impl"

    implements="co.anbora.labs.fantom.lang.core.psi.FantomElement"
    extends="co.anbora.labs.fantom.lang.core.psi.FantomElementImpl"

    psiPackage="co.anbora.labs.fantom.lang.core.psi"
    psiImplPackage="co.anbora.labs.fantom.lang.core.psi.impl"
    parserUtilClass="co.anbora.labs.fantom.lang.core.util.FantomParserUtil"

    elementTypeHolderClass="co.anbora.labs.fantom.lang.core.psi.FantomTypes"

    elementTypeClass="co.anbora.labs.fantom.lang.core.FantomElementType"
    tokenTypeClass="co.anbora.labs.fantom.lang.core.FantomTokenType"


    tokens = [

        OR                  = '|'
        LPAR                = '('
        RPAR                = ')'
        LBRACE              = '{'
        RBRACE              = '}'
        LBRACKET            = '['
        RBRACKET            = ']'

        DOT                 = '.'
        RANGE_SEP_INCL      = '..'
        RANGE_SEP_EXCL      = '..<'
        DYN_CALL            = '->'
        SAFE_DOT            = '?.'
        SAFE_DYN_CALL       = '?->'

        EQ                  = '='

        SEMICOLON           = ';'
        COMMA               = ','

        COLON_COLON         = '::'
        COLON               = ':'
        SHARP               = '#'                   
        AT                  = "@"                   
        QUEST               = "?"                   
        QUEST_COLON         = "?:"
        COLON_EQ            = ':='
        EQEQ                = "=="                  
        NE                  = "!="                  
        EQEQEQ              = "==="                 
        NEEQ                = "!=="                 

        LT                  = "<"                   
        GT                  = ">"                   
        LE                  = "<="                  
        GE                  = ">="                  
        COMPARE             = "<=>"                 
        PLUS                = "+"                   
        MINUS               = "-"                   
        MULT                = "*"                   
        PERC                = "%"                   
        PLUSPLUS            = "++"                  
        MINUSMINUS          = "--"                  
        LTLT                = "<<"                  
        GTGT                = ">>"                  
        AND                 = "&"                   
        XOR                 = "^"                   
        EXCL                = "!"                   
        TILDE               = "~"                   
        ANDAND              = "&&"                  
        OROR                = "||"                  
        PLUSEQ              = "+="                  
        MINUSEQ             = "-="                  
        MULTEQ              = "*="                  
        PERCEQ              = "%="                  
        LTLTEQ              = "<<="                 
        GTGTEQ              = ">>="                 
        ANDEQ               = "&="                  
        OREQ                = "|="                  
        XOREQ               = "^="                  
        DIV                 = "/"                   
        DIVEQ               = "/="                  

    ]

}

compilationUnit ::=  usingDef* typeDef* doc*
usingDef          ::=  usingPod | usingType | usingAs
usingPod        ::=  using podSpec eos
usingType       ::=  using podSpec "::" id eos
usingAs         ::=  using podSpec "::" id as id eos
podSpec         ::=  id | str | ffiPodSpec
ffiPodSpec      ::= "[" id "]" id ("." id)*
doc             ::= FANDOC_LINE_COMMENT
//------------

typeDef        ::=  classDef | mixinDef | facetDef | enumDef

classDef       ::=  typeHeader class id [inheritance] "{" slotDefs "}"
mixinDef       ::=  typeHeader mixin id [inheritance] "{" slotDefs "}"
facetDef       ::=  typeHeader facet class id [inheritance] "{" slotDefs "}"
enumDef        ::=  typeHeader enum class id [inheritance] "{" enumValDefs slotDefs "}"

typeHeader     ::=  [doc] facets typeFlags
typeFlags      ::=  typeFlag*
typeFlag       ::=  protection | abstract | final | const | native
protection     ::=  public | protected | private | internal
inheritance    ::=  ":" typeList

//------------

enumValDefs    ::=  enumValDef ("," enumValDef)* eos
enumValDef     ::=  facets id ["(" args ")"]

slotDefs       ::=  slotDef*
slotDef        ::=  fieldDef | methodDef | ctorDef | staticInit

fieldDef       ::=  facets fieldFlags type id [":=" expr]
                     [ "{" [fieldGetter] [fieldSetter] "}" ] eos
fieldFlags     ::=  fieldFlag*
fieldFlag      ::=  protection | abstract | const | final | native |
                     override | readonly | static | virtual
fieldGetter    ::=  get (eos | block)
fieldSetter    ::=  protection set (eos | block)

methodDef      ::=  facets methodFlags type id "(" params ")" methodBody
methodFlags    ::=  methodFlag*
methodFlag     ::=  protection | abstract | native | once |
                     override | static | virtual | final
params         ::=  [param ("," param)*]
param          ::=  type id [":=" expr]
methodBody     ::=  eos | ( "{" stmts "}" )

ctorDef        ::=  facets ctorFlags new id "(" params ")" [ctorChain] methodBody
ctorFlags      ::=  [protection]
ctorChain      ::=  ":" ctorChainThis | ctorChainSuper
ctorChainThis  ::=  this "." id "(" args ")"
ctorChainSuper ::=  super ["." id] "(" args ")"

staticInit     ::=  static "{" stmts "}"

//--------------

facets        ::= facetItems*
facetItems    ::= "@" simpleType [facetVals]
facetVals     ::= "{" facetVal (eos facetVal)* "}"
facetVal      ::= id "=" expr

//-------------

block          ::=  stmt | ( "{" stmts "}" )
stmts            ::=  stmt*
stmt             ::=  breakStm | continueStm | forStm | ifStm | returnStm | switchStm |
                     throwStm | whileStm | tryStm | exprStmt | localDef | itAdd
breakStm         ::=  break eos
continueStm      ::=  continue eos
forStm           ::=  for "(" [forInit] ";" [expr] ";" [expr] ")" block
forInit        ::=  expr | localDef
ifStm            ::=  if "(" expr ")" block [ else block ]
returnStm        ::=  return [expr] eos
throwStm         ::=  throw expr eos
whileStm         ::=  while "(" expr ")" block
exprStmt       ::=  expr eos
localDef       ::=  [type] id [":=" expr] eos
itAdd          ::=  expr ("," expr)* [","] eos

tryStm           ::=  try block catchStm* [finallyStm]
catchStm         ::=  catch [catchDef] block
catchDef       ::=  "(" type id ")"
finallyStm       ::=  finally block

switchStm        ::=  switch "(" expr ")" "{" caseStm* [defaultStm] "}"
caseStm          ::=  case expr ":" stmts
defaultStm       ::=  default ":" stmts

//------------

expr           ::=  assignExpr
assignExpr     ::=  ifExpr [assignOp assignExpr]
assignOp       ::=  "=" | "*=" | "/=" | "%=" | "+=" | "-="

ifExpr           ::=  ternaryExpr | elvisExpr
ternaryExpr      ::=  condOrExpr ["?" ifExprBody ":" ifExprBody]
elvisExpr        ::=  condOrExpr "?:" ifExprBody
ifExprBody     ::=  condOrExpr | ifExprThrow
ifExprThrow    ::=  throw expr

condOrExpr     ::=  condAndExpr  ("||" condAndExpr)*
condAndExpr    ::=  equalityExpr ("&&" equalityExpr)*
equalityExpr   ::=  relationalExpr [("==" | "!=" | "===" | "!==") relationalExpr]
relationalExpr ::=  typeCheckExpr | compareExpr
typeCheckExpr  ::=  rangeExpr [(is | as | isnot) type]
compareExpr    ::=  rangeExpr [("<" | "<=" | ">" | ">=" | "<=>") rangeExpr]
rangeExpr      ::=  addExpr ((".." | "..<") addExpr)*
addExpr        ::=  multExpr (("+" | "-") multExpr)*
multExpr         ::=  parenExpr (("*" | "/" | "%") parenExpr)*
parenExpr        ::=  unaryExpr | castExpr | groupedExpr
castExpr       ::=  "(" type ")" parenExpr
groupedExpr    ::=  "(" expr ")" termChain*
unaryExpr      ::=  prefixExpr | termExpr | postfixExpr
prefixExpr     ::=  ("!" | "+" | "-" | "++" | "--") parenExpr
postfixExpr    ::=  termExpr ("++" | "--")

termExpr       ::=  termBase termChain*
termBase       ::=  literal | idExpr | typeBase
typeBase       ::=  typeLiteral | slotLiteral | namedSuper | staticCall |
                     dsl | closure | simple | ctorBlock
typeLiteral    ::=  type "#"
slotLiteral    ::=  [type] "#" id
namedSuper     ::=  type "." super
staticCall     ::=  type "." slotExpr
dsl            ::=  type DSL_STRING
simple         ::=  type "(" expr ")"
ctorBlock      ::=  type itBlock
termChain      ::=  dotCall | dynCallStm | safeDotCallStm | safeDynCallStm |
                     indexExpr | callOp | itBlock
itBlock        ::=  "{" stmts "}"
dotCall        ::=  "." slotExpr
dynCallStm       ::=  "->" slotExpr
safeDotCallStm   ::=  "?." slotExpr
safeDynCallStm   ::=  "?->" slotExpr
idExpr         ::=  local | slotExpr
slotExpr       ::=  field | call
local          ::=  id
field          ::=  ["&"] id
call           ::=  id ["(" args ")"] [closure]
args           ::=  [expr ("," expr)*]
indexExpr      ::=  "[" expr "]"
callOp         ::=  "(" args ")" [closure]

literal        ::=  null | this | super | it |
                     bool | INT_LITERAL | FLOAT_LITERAL | DECIMAL_LITERAL | str |
                     DURATION_LITERAL | URI_LITERAL | list | map
bool           ::=  TRUE | FALSE
str            ::=  TRIPLE_STRING_LITERAL | STRING_LITERAL | CHAR_LITERAL
list           ::=  [type] "[" listItems "]"
listItems      ::=  "," | (expr ("," expr)*) [","]
map            ::=  [mapType] "[" mapItems [","] "]"
mapItems       ::=  ":" | (mapPair ("," mapPair)*)
mapPair        ::=  expr ":" expr

closure        ::=  closureSig "{" stmts "}"
closureSig     ::=  "|" closureParams ["->" type] "|"
closureParams  ::=  [closureParam ("," closureParam)*]
closureParam   ::=  formal | id

//--------------------

type           ::=  nullType | nonNullType
nullType       ::=  nonNullType "?"
nonNullType    ::=  simpleType | listType | mapType | funcType
typeList       ::=  type ("," type)*
simpleType     ::=  id ["::" id]
listType       ::=  type "[" "]"
mapType        ::=  ["["] type ":" type ["]"]
funcType       ::=  "|" [formals] ["->" type] "|"
formals        ::=  [formal ("," formal)*]
formal         ::=  formalFull | formalInferred | formalTypeOnly
formalFull     ::=  type id
formalInferred ::=  id
formalTypeOnly ::=  type

//-------------------

id             ::= IDENTIFIER
//<idStart>        ::= ID_CHAR_START
//<idChar>         ::= ID_CHAR_START | ID_CHAR_NUMBER
eos            ::= ";" | NLS | "}"